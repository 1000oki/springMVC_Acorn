<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- bean설정을 통해 MemberDaoImpl설정
	<beans:bean class="com.gura.spring02.member.dao.MemberDaoImpl">
	</beans:bean>
	하지만 우린 component scan을 통해 bean을 설정할 수 있음.
	적절한 어노테이션을 사용해줘야함.
	 -->
	 
	<!-- 
	     JNDI 데이터 소스 객체 얻어오는 설정   
	     Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
	      
	     <Resource name="jdbc/myoracle" auth="Container"
	             type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
	             url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
	             username="scott" password="tiger" maxTotal="20" maxIdle="10"
	             maxWaitMillis="-1"/>          
   -->
   
   <!--
   		mem1=new MemberDto()
   		mem1.setNum(1)과 같음. 

   <beans:bean id="mem1" class="com.gura.spring02.member.dto.MemberDto">
   		<beans:property name="num" value = "1"/>
   		<beans:property name="name" value = "김구라"/>
   		<beans:property name="addr" value = "노량진"/>
   </beans:bean>
   -->
   
   <!--  참조값은 ref, 숫자나 문자는 value  -->
   <beans:bean id="dataSource" 
      class="org.springframework.jndi.JndiObjectFactoryBean">
      <beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
   </beans:bean>
   
   <!-- 
      위는 아래의 코드와 같다
      dataSource = new JndiObjectFactoryBean();
      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
    -->
   
   
   <!-- 
      SqlSessionFactory 객체 
      Configuration.xml 문서가 어디에 있는지 알려야 한다. 
      value에서 classpath: 은 src/main/resources 폴더를 가리킨다.
      따라서 classpath:Configuration.xml은 src/main/resources 폴더 안에 존재해야한다.
   -->
   <beans:bean id="sessionFactory" 
      class="org.mybatis.spring.SqlSessionFactoryBean">
      <beans:property name="dataSource" ref="dataSource"/>
      <beans:property name="configLocation" value="classpath:Configuration.xml"/>
   </beans:bean>
   <!-- 
      sessionFactory=new SqlSessionFactoryBean();
      sessionFactory.setDataSource(dataSource);
      sessionFactory.setConfigLocation("classpath:com/gura/xxx");
    -->
   

   <!-- 
      SqlSession 인터페이스를 구현한 
      SqlSessionTemplate(SqlSession) 객체 
      Dao 가 의존하는 객체 
      constructo-arg은 생성자의 인자에 넣어준다는 뜻
      
      class SqlSessionTemplate implements SqlSession{ }이기 때문에
      즉, SqlSessionTemplate는 SqlSession을 주입 받기 때문에 Dao에서 SqlSessionTemplate가 아닌 SqlSession으로 써도 된다.
   -->
   <beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      <beans:constructor-arg name="sqlSessionFactory" 
         ref="sessionFactory"/>
   </beans:bean>
   
   
   
   <!-- 
      위의 bean 설정을 java code 로 환산 하면 아래와 같다 
      
      dataSource = new JndiObjectFactoryBean();
      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
      
      sessionFactory=new SqlSessionFactoryBean();
      sessionFactory.setDataSource(dataSource);
      sessionFactory.setConfigLocation("classpath:xxx");
      
      new SqlSessionTemplate(sessionFactory);
    -->

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 어떤 패키지를 component scan을 할지에 대한 설정, 하위 패키지는 자동으로 포함된다.-->
	<context:component-scan base-package="com.gura.spring02" />
		
</beans:beans>
